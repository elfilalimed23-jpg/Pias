<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PiÃ¨ces Auto - Gestion de Leads</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://widget.cloudinary.com/v2.0/global/all.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <style>
        .modal { display: none; }
        .modal-active { display: flex !important; }
        .error-message { color: red; text-align: center; }
        #map { height: 200px; }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <!-- Header -->
    <header class="bg-blue-600 text-white py-6">
        <div class="container mx-auto text-center">
            <h1 class="text-3xl font-bold">PiÃ¨ces Auto - Gestion de Leads</h1>
            <p class="mt-2">Connectez clients et vendeurs de piÃ¨ces auto via WhatsApp</p>
            <div class="mt-4">
                <button id="loginBtn" class="bg-gray-500 text-white px-4 py-2 rounded">Se connecter</button>
                <button id="logoutBtn" class="bg-red-500 text-white px-4 py-2 rounded hidden">Se dÃ©connecter</button>
                <span id="userInfo" class="ml-4"></span>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto py-8">
        <!-- Connexion -->
        <div id="loginModal" class="fixed inset-0 bg-black bg-opacity-50 modal items-center justify-center">
            <div class="bg-white p-6 rounded-lg w-full max-w-md">
                <h3 class="text-xl font-semibold mb-4">Connexion via WhatsApp</h3>
                <form id="loginForm">
                    <div class="mb-4">
                        <label class="block text-gray-700">NumÃ©ro WhatsApp (+33...)</label>
                        <input type="tel" id="loginPhone" required class="w-full p-2 border rounded">
                    </div>
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Envoyer le code OTP</button>
                    <button type="button" id="closeLogin" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Fermer</button>
                </form>
                <div id="otpSection" class="hidden mt-4">
                    <label class="block text-gray-700">Code OTP</label>
                    <input type="text" id="otpCode" class="w-full p-2 border rounded">
                    <button id="verifyOtp" class="bg-blue-600 text-white px-4 py-2 rounded mt-2">VÃ©rifier</button>
                </div>
                <p id="loginError" class="error-message mt-4 hidden"></p>
                <p class="mt-4">Pas de compte ? <a href="#" id="signupLink">Inscrivez-vous</a></p>
            </div>
        </div>

        <!-- Inscription -->
        <div id="signupModal" class="fixed inset-0 bg-black bg-opacity-50 modal items-center justify-center">
            <div class="bg-white p-6 rounded-lg w-full max-w-md">
                <h3 class="text-xl font-semibold mb-4">Inscription via WhatsApp</h3>
                <form id="signupForm">
                    <div class="mb-4">
                        <label class="block text-gray-700">NumÃ©ro WhatsApp (+33...)</label>
                        <input type="tel" id="signupPhone" required class="w-full p-2 border rounded">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Type (Client/Vendeur)</label>
                        <select id="userType" required class="w-full p-2 border rounded">
                            <option value="client">Client</option>
                            <option value="seller">Vendeur</option>
                        </select>
                    </div>
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Envoyer le code OTP</button>
                    <button type="button" id="closeSignup" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Fermer</button>
                </form>
                <div id="signupOtpSection" class="hidden mt-4">
                    <label class="block text-gray-700">Code OTP</label>
                    <input type="text" id="signupOtpCode" class="w-full p-2 border rounded">
                    <button id="verifySignupOtp" class="bg-blue-600 text-white px-4 py-2 rounded mt-2">VÃ©rifier</button>
                </div>
                <p id="signupError" class="error-message mt-4 hidden"></p>
            </div>
        </div>

        <!-- Formulaire vendeur -->
        <section id="sellerFormSection" class="mb-8 hidden">
            <h2 class="text-2xl font-semibold mb-4">Inscription Vendeur</h2>
            <form id="sellerForm" class="bg-white p-6 rounded-lg shadow-lg">
                <div class="mb-4">
                    <label class="block text-gray-700">Nom</label>
                    <input type="text" id="sellerName" required class="w-full p-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">NumÃ©ro WhatsApp (+33...)</label>
                    <input type="tel" id="sellerPhone" required class="w-full p-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Localisation</label>
                    <div id="map"></div>
                    <input type="hidden" id="sellerLat">
                    <input type="hidden" id="sellerLng">
                </div>
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Enregistrer</button>
            </form>
            <p id="sellerError" class="error-message mt-4 hidden"></p>
        </section>

        <!-- Formulaire client -->
        <section id="clientFormSection" class="mb-8">
            <h2 class="text-2xl font-semibold mb-4">Demander une piÃ¨ce</h2>
            <form id="clientForm" class="bg-white p-6 rounded-lg shadow-lg">
                <div class="mb-4">
                    <label class="block text-gray-700">Nom</label>
                    <input type="text" id="clientName" required class="w-full p-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">NumÃ©ro WhatsApp (+33...)</label>
                    <input type="tel" id="clientWhatsApp" required class="w-full p-2 border rounded">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Description de la piÃ¨ce</label>
                    <textarea id="clientDescription" required class="w-full p-2 border rounded"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Photo de la piÃ¨ce</label>
                    <button type="button" id="uploadPhoto" class="bg-blue-600 text-white px-4 py-2 rounded">TÃ©lÃ©verser</button>
                    <input type="hidden" id="photoUrl">
                    <p id="photoStatus" class="text-gray-600 mt-2"></p>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700"><input type="checkbox" id="consent" required> J'accepte la politique de confidentialitÃ©</label>
                </div>
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Recevoir des offres</button>
            </form>
            <p id="clientError" class="error-message mt-4 hidden"></p>
        </section>

        <!-- Tableau de bord -->
        <section id="dashboardSection" class="mb-8 hidden">
            <h2 class="text-2xl font-semibold mb-4">Tableau de bord</h2>
            <div id="requestsList" class="bg-white p-6 rounded-lg shadow-lg"></div>
        </section>

        <!-- Modal pour soumettre une offre -->
        <div id="offerModal" class="fixed inset-0 bg-black bg-opacity-50 modal items-center justify-center">
            <div class="bg-white p-6 rounded-lg w-full max-w-md">
                <h3 class="text-xl font-semibold mb-4">Soumettre une offre</h3>
                <form id="offerForm">
                    <div class="mb-4">
                        <label class="block text-gray-700">Prix proposÃ© (â¬)</label>
                        <input type="number" id="offerPrice" step="0.01" required class="w-full p-2 border rounded">
                    </div>
                    <input type="hidden" id="offerRequestId">
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Envoyer lâoffre</button>
                    <button type="button" id="closeOffer" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Fermer</button>
                </form>
                <p id="offerError" class="error-message mt-4 hidden"></p>
            </div>
        </div>

        <!-- Modal pour clÃ´turer une demande -->
        <div id="closeRequestModal" class="fixed inset-0 bg-black bg-opacity-50 modal items-center justify-center">
            <div class="bg-white p-6 rounded-lg w-full max-w-md">
                <h3 class="text-xl font-semibold mb-4">ClÃ´turer la demande</h3>
                <form id="closeRequestForm">
                    <div class="mb-4">
                        <label class="block text-gray-700">Note pour le vendeur (1-5)</label>
                        <input type="number" id="sellerRating" min="1" max="5" required class="w-full p-2 border rounded">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700">Commentaire (optionnel)</label>
                        <textarea id="sellerComment" class="w-full p-2 border rounded"></textarea>
                    </div>
                    <input type="hidden" id="closeRequestId">
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">ClÃ´turer</button>
                    <button type="button" id="closeCloseRequest" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Fermer</button>
                </form>
                <p id="closeRequestError" class="error-message mt-4 hidden"></p>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 mt-8">
        <div class="container mx-auto text-center">
            <p>&copy; 2025 PiÃ¨ces Auto Vitrine. Tous droits rÃ©servÃ©s.</p>
            <a href="privacy.html" class="text-blue-300">Politique de confidentialitÃ©</a>
        </div>
    </footer>

    <script>
        // Firebase Config
        const firebaseConfig = {
            apiKey: "AIzaSyDqOBYReVwpp-OmV5qJ7Pnv3YBoRLCsXOk",
            authDomain: "pias-4f200.firebaseapp.com",
            projectId: "pias-4f200",
            storageBucket: "pias-4f200.firebasestorage.app",
            messagingSenderId: "426883647930",
            appId: "1:426883647930:web:19c5484ba756356d073583"
        };
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();

        // Cloudinary Config
        const CLOUDINARY_UPLOAD_PRESET = 'pias_upload';
        const CLOUDINARY_CLOUD_NAME = 'dh9wgl8cm';

        // Afficher/Cacher erreurs
        function showError(elementId, message) {
            document.getElementById(elementId).textContent = message;
            document.getElementById(elementId).classList.remove('hidden');
        }
        function hideError(elementId) {
            document.getElementById(elementId).classList.add('hidden');
        }

        // Gestion de lâauthentification
        auth.onAuthStateChanged(user => {
            const loginBtn = document.getElementById('loginBtn');
            const logoutBtn = document.getElementById('logoutBtn');
            const userInfo = document.getElementById('userInfo');
            const sellerFormSection = document.getElementById('sellerFormSection');
            const clientFormSection = document.getElementById('clientFormSection');
            const dashboardSection = document.getElementById('dashboardSection');
            if (user) {
                loginBtn.classList.add('hidden');
                logoutBtn.classList.remove('hidden');
                userInfo.textContent = `ConnectÃ© : ${user.phoneNumber}`;
                dashboardSection.classList.remove('hidden');
                db.collection('users').doc(user.uid).get().then(doc => {
                    if (doc.exists && doc.data().type === 'seller' && !doc.data().profileComplete) {
                        sellerFormSection.classList.remove('hidden');
                        clientFormSection.classList.add('hidden');
                    } else {
                        sellerFormSection.classList.add('hidden');
                        clientFormSection.classList.remove('hidden');
                    }
                    loadRequests(user);
                });
            } else {
                loginBtn.classList.remove('hidden');
                logoutBtn.classList.add('hidden');
                userInfo.textContent = '';
                sellerFormSection.classList.add('hidden');
                clientFormSection.classList.remove('hidden');
                dashboardSection.classList.add('hidden');
            }
        });

        // Connexion via WhatsApp
        document.getElementById('loginForm').addEventListener('submit', async e => {
            e.preventDefault();
            hideError('loginError');
            const phone = document.getElementById('loginPhone').value;
            try {
                // Envoyer OTP via Twilio (Netlify Function)
                const response = await fetch('/.netlify/functions/send-otp', {
                    method: 'POST',
                    body: JSON.stringify({ phone })
                });
                const data = await response.json();
                if (data.success) {
                    document.getElementById('otpSection').classList.remove('hidden');
                    document.getElementById('loginForm').querySelector('button[type="submit"]').classList.add('hidden');
                } else {
                    showError('loginError', 'Erreur lors de lâenvoi du code OTP.');
                }
            } catch (error) {
                showError('loginError', 'Erreur rÃ©seau.');
            }
        });

        document.getElementById('verifyOtp').addEventListener('click', async () => {
            hideError('loginError');
            const phone = document.getElementById('loginPhone').value;
            const otp = document.getElementById('otpCode').value;
            try {
                const response = await fetch('/.netlify/functions/verify-otp', {
                    method: 'POST',
                    body: JSON.stringify({ phone, otp })
                });
                const data = await response.json();
                if (data.success) {
                    await auth.signInWithCustomToken(data.token);
                    document.getElementById('loginModal').classList.remove('modal-active');
                } else {
                    showError('loginError', 'Code OTP incorrect.');
                }
            } catch (error) {
                showError('loginError', 'Erreur lors de la vÃ©rification.');
            }
        });

        // Inscription via WhatsApp
        document.getElementById('signupForm').addEventListener('submit', async e => {
            e.preventDefault();
            hideError('signupError');
            const phone = document.getElementById('signupPhone').value;
            const type = document.getElementById('userType').value;
            try {
                const response = await fetch('/.netlify/functions/send-otp', {
                    method: 'POST',
                    body: JSON.stringify({ phone })
                });
                const data = await response.json();
                if (data.success) {
                    document.getElementById('signupOtpSection').classList.remove('hidden');
                    document.getElementById('signupForm').querySelector('button[type="submit"]').classList.add('hidden');
                    document.getElementById('signupOtpCode').dataset.type = type;
                } else {
                    showError('signupError', 'Erreur lors de lâenvoi du code OTP.');
                }
            } catch (error) {
                showError('signupError', 'Erreur rÃ©seau.');
            }
        });

        document.getElementById('verifySignupOtp').addEventListener('click', async () => {
            hideError('signupError');
            const phone = document.getElementById('signupPhone').value;
            const otp = document.getElementById('signupOtpCode').value;
            const type = document.getElementById('signupOtpCode').dataset.type;
            try {
                const response = await fetch('/.netlify/functions/verify-otp', {
                    method: 'POST',
                    body: JSON.stringify({ phone, otp, type })
                });
                const data = await response.json();
                if (data.success) {
                    await auth.signInWithCustomToken(data.token);
                    await db.collection('users').doc(auth.currentUser.uid).set({
                        phoneNumber: phone,
                        type,
                        profileComplete: type === 'client'
                    });
                    document.getElementById('signupModal').classList.remove('modal-active');
                } else {
                    showError('signupError', 'Code OTP incorrect.');
                }
            } catch (error) {
                showError('signupError', 'Erreur lors de la vÃ©rification.');
            }
        });

        // DÃ©connexion
        document.getElementById('logoutBtn').addEventListener('click', () => {
            auth.signOut();
        });

        // Modales connexion/inscription
        document.getElementById('loginBtn').addEventListener('click', () => {
            document.getElementById('loginModal').classList.add('modal-active');
        });
        document.getElementById('closeLogin').addEventListener('click', () => {
            document.getElementById('loginModal').classList.remove('modal-active');
        });
        document.getElementById('signupLink').addEventListener('click', () => {
            document.getElementById('loginModal').classList.remove('modal-active');
            document.getElementById('signupModal').classList.add('modal-active');
        });
        document.getElementById('closeSignup').addEventListener('click', () => {
            document.getElementById('signupModal').classList.remove('modal-active');
        });

        // Carte pour localisation vendeur
        let map, marker;
        function initMap() {
            map = L.map('map').setView([48.8566, 2.3522], 13); // Paris par dÃ©faut
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Â© OpenStreetMap'
            }).addTo(map);
            marker = L.marker([48.8566, 2.3522], { draggable: true }).addTo(map);
            marker.on('dragend', () => {
                const position = marker.getLatLng();
                document.getElementById('sellerLat').value = position.lat;
                document.getElementById('sellerLng').value = position.lng;
            });
        }

        // Formulaire vendeur
        document.getElementById('sellerForm').addEventListener('submit', async e => {
            e.preventDefault();
            hideError('sellerError');
            const user = auth.currentUser;
            if (!user) return showError('sellerError', 'Veuillez vous connecter.');
            try {
                await db.collection('users').doc(user.uid).update({
                    name: document.getElementById('sellerName').value,
                    phone: document.getElementById('sellerPhone').value,
                    location: {
                        lat: parseFloat(document.getElementById('sellerLat').value),
                        lng: parseFloat(document.getElementById('sellerLng').value)
                    },
                    profileComplete: true
                });
                document.getElementById('sellerFormSection').classList.add('hidden');
                document.getElementById('clientFormSection').classList.remove('hidden');
            } catch (error) {
                showError('sellerError', 'Erreur lors de lâenregistrement.');
            }
        });

        // Cloudinary pour photos
        const uploadWidget = cloudinary.createUploadWidget(
            {
                cloudName: CLOUDINARY_CLOUD_NAME,
                uploadPreset: CLOUDINARY_UPLOAD_PRESET,
                sources: ['local', 'camera'],
                multiple: false,
                resourceType: 'image'
            },
            (error, result) => {
                if (!error && result && result.event === 'success') {
                    document.getElementById('photoUrl').value = result.info.secure_url;
                    document.getElementById('photoStatus').textContent = 'Photo tÃ©lÃ©versÃ©e !';
                } else if (error) {
                    showError('clientError', 'Erreur lors du tÃ©lÃ©versement.');
                }
            }
        );
        document.getElementById('uploadPhoto').addEventListener('click', () => {
            uploadWidget.open();
        });

        // Formulaire client
        document.getElementById('clientForm').addEventListener('submit', async e => {
            e.preventDefault();
            hideError('clientError');
            const user = auth.currentUser;
            if (!user) return showError('clientError', 'Veuillez vous connecter.');
            const request = {
                clientId: user.uid,
                name: document.getElementById('clientName').value,
                whatsApp: document.getElementById('clientWhatsApp').value,
                description: document.getElementById('clientDescription').value,
                photoUrl: document.getElementById('photoUrl').value,
                status: 'open',
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            };
            try {
                const docRef = await db.collection('requests').add(request);
                // Notifier les vendeurs via WhatsApp
                const sellers = await db.collection('users').where('type', '==', 'seller').get();
                for (const doc of sellers.docs) {
                    await fetch('/.netlify/functions/send-whatsapp', {
                        method: 'POST',
                        body: JSON.stringify({
                            to: doc.data().phone,
                            message: `Nouvelle demande #${docRef.id} : ${request.description}`
                        })
                    });
                }
                alert('Demande envoyÃ©e !');
                document.getElementById('clientForm').reset();
                document.getElementById('photoStatus').textContent = '';
            } catch (error) {
                showError('clientError', 'Erreur lors de lâenvoi.');
            }
        });

        // Formulaire offre
        document.getElementById('offerForm').addEventListener('submit', async e => {
            e.preventDefault();
            hideError('offerError');
            const user = auth.currentUser;
            if (!user) return showError('offerError', 'Veuillez vous connecter.');
            const offer = {
                sellerId: user.uid,
                requestId: document.getElementById('offerRequestId').value,
                price: parseFloat(document.getElementById('offerPrice').value),
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            };
            try {
                await db.collection('offers').add(offer);
                // Notifier le client via WhatsApp
                const request = await db.collection('requests').doc(offer.requestId).get();
                await fetch('/.netlify/functions/send-whatsapp', {
                    method: 'POST',
                    body: JSON.stringify({
                        to: request.data().whatsApp,
                        message: `Nouvelle offre pour demande #${offer.requestId} : ${offer.price.toFixed(2)} â¬`
                    })
                });
                document.getElementById('offerModal').classList.remove('modal-active');
                loadRequests(user);
            } catch (error) {
                showError('offerError', 'Erreur lors de lâenvoi de lâoffre.');
            }
        });
        document.getElementById('closeOffer').addEventListener('click', () => {
            document.getElementById('offerModal').classList.remove('modal-active');
        });

        // ClÃ´turer une demande
        document.getElementById('closeRequestForm').addEventListener('submit', async e => {
            e.preventDefault();
            hideError('closeRequestError');
            const user = auth.currentUser;
            if (!user) return showError('closeRequestError', 'Veuillez vous connecter.');
            const requestId = document.getElementById('closeRequestId').value;
            const rating = parseInt(document.getElementById('sellerRating').value);
            const comment = document.getElementById('sellerComment').value;
            try {
                await db.collection('requests').doc(requestId).update({
                    status: 'closed',
                    rating,
                    comment
                });
                document.getElementById('closeRequestModal').classList.remove('modal-active');
                loadRequests(user);
            } catch (error) {
                showError('closeRequestError', 'Erreur lors de la clÃ´ture.');
            }
        });
        document.getElementById('closeCloseRequest').addEventListener('click', () => {
            document.getElementById('closeRequestModal').classList.remove('modal-active');
        });

        // Charger les demandes
        async function loadRequests(user) {
            const requestsList = document.getElementById('requestsList');
            requestsList.innerHTML = '';
            const userDoc = await db.collection('users').doc(user.uid).get();
            const userType = userDoc.data().type;
            const query = userType === 'client'
                ? db.collection('requests').where('clientId', '==', user.uid)
                : db.collection('requests').where('status', '==', 'open');
            const requests = await query.get();
            requests.forEach(async doc => {
                const request = doc.data();
                const requestDiv = document.createElement('div');
                requestDiv.className = 'border p-4 mb-4 rounded';
                requestDiv.innerHTML = `
                    <p><strong>Demande #${doc.id}</strong></p>
                    <p><strong>Description:</strong> ${request.description}</p>
                    <p><strong>Photo:</strong> <a href="${request.photoUrl}" target="_blank">Voir</a></p>
                    <p><strong>Client:</strong> ${request.name} (${request.whatsApp})</p>
                    <p><strong>Statut:</strong> ${request.status}</p>
                `;
                if (userType === 'seller' && request.status === 'open') {
                    const offerBtn = document.createElement('button');
                    offerBtn.className = 'bg-green-600 text-white px-4 py-2 rounded mt-2';
                    offerBtn.textContent = 'Proposer une offre';
                    offerBtn.addEventListener('click', () => {
                        document.getElementById('offerRequestId').value = doc.id;
                        document.getElementById('offerModal').classList.add('modal-active');
                    });
                    requestDiv.appendChild(offerBtn);
                }
                if (userType === 'client' && request.status === 'open') {
                    const closeBtn = document.createElement('button');
                    closeBtn.className = 'bg-red-600 text-white px-4 py-2 rounded mt-2';
                    closeBtn.textContent = 'ClÃ´turer';
                    closeBtn.addEventListener('click', () => {
                        document.getElementById('closeRequestId').value = doc.id;
                        document.getElementById('closeRequestModal').classList.add('modal-active');
                    });
                    requestDiv.appendChild(closeBtn);
                }
                const offers = await db.collection('offers').where('requestId', '==', doc.id).get();
                if (!offers.empty) {
                    const offersDiv = document.createElement('div');
                    offersDiv.innerHTML = '<p><strong>Offres :</strong></p>';
                    for (const offer of offers.docs) {
                        const offerData = offer.data();
                        const seller = await db.collection('users').doc(offerData.sellerId).get();
                        offersDiv.innerHTML += `
                            <p>- ${seller.data().name} : ${offerData.price.toFixed(2)} â¬</p>
                        `;
                    }
                    requestDiv.appendChild(offersDiv);
                }
                if (request.status === 'closed' && request.rating) {
                    requestDiv.innerHTML += `
                        <p><strong>Note :</strong> ${request.rating}/5</p>
                        <p><strong>Commentaire :</strong> ${request.comment || 'Aucun'}</p>
                    `;
                }
                requestsList.appendChild(requestDiv);
            });
        }

        // Initialisation
        initMap();
    </script>
</body>
</html>
